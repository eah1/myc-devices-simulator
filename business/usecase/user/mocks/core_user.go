// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	user "myc-devices-simulator/business/core/user"
)

// CoreUser is an autogenerated mock type for the CoreUser type
type CoreUser struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *CoreUser) Create(ctx context.Context, _a1 user.User) (user.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) (user.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.User) user.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.User) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCoreUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewCoreUser creates a new instance of CoreUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCoreUser(t mockConstructorTestingTNewCoreUser) *CoreUser {
	mock := &CoreUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
