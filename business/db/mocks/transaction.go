// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	db "myc-devices-simulator/business/db"

	mock "github.com/stretchr/testify/mock"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *Transaction) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *Transaction) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxBegin provides a mock function with given fields:
func (_m *Transaction) TxBegin() (db.SQLGbc, error) {
	ret := _m.Called()

	var r0 db.SQLGbc
	var r1 error
	if rf, ok := ret.Get(0).(func() (db.SQLGbc, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() db.SQLGbc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.SQLGbc)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxEnd provides a mock function with given fields: txFunc
func (_m *Transaction) TxEnd(txFunc func() error) error {
	ret := _m.Called(txFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransaction interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransaction(t mockConstructorTestingTNewTransaction) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
